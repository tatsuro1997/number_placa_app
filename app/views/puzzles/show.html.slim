.max-w-lg.mx-auto.mt-8.font-sans.text-gray-800 [
  class='w-[450px]'
  data-controller='board timer'
  data-board-selected-class='bg-yellow-200'
  data-board-error-class='bg-red-200'
  data-board-normal-class='bg-white'
  data-board-modal-class='hidden'
  data-board-target='timer'
  data-timer-visible-class='inline-block'
  data-timer-hidden-class='hidden'
]
  .flex.items-center.justify-around.mb-4
    h1.text-3xl.font-bold.text-center
      =  "ナンプレ # #{ @puzzle.id }"
    / タイマーエリア
    .flex.flex-col.items-center
      .text-xl.font-mono.font-bold.text-blue-600[
        data-timer-target='display'
        data-board-target='time'
      ]
        | 00:00
      .flex.space-x-2
        button.px-2.py-1.bg-green-500.text-white.rounded.text-xs.font-semibold.cursor-pointer.hover:bg-green-600.transition[
          type='button'
          data-action='click->timer#start'
          data-timer-target='startBtn'
        ]
          | スタート
        button.px-2.py-1.bg-yellow-500.text-white.rounded.text-xs.font-semibold.cursor-pointer.hover:bg-yellow-600.transition [
          type='button'
          data-action='click->timer#pause'
          data-timer-target='pauseBtn'
        ]
          | 一時停止
        button.px-2.py-1.bg-red-500.text-white.rounded.text-xs.font-semibold.cursor-pointer.hover:bg-red-600.transition [
          type='button'
          data-action='click->timer#reset'
          data-timer-target='resetBtn'
        ]
          | リセット

  .flex.justify-center.mb-4
      = form_with url: reset_puzzle_path(@puzzle), method: :post, local: true, data: { turbo_confirm: 'パズルをリセットしますか？\n\n入力したすべての数字が削除され、タイマーもリセットされます。\nこの操作は取り消せません。' } do |f|
        = f.submit '🔄 リセット', class: 'px-2 py-1 bg-gray-400 text-white rounded font-semibold text-xs shadow-md cursor-pointer hover:bg-gray-500'

  - if @completion_info
    .mb-4.p-4.bg-green-50.border.border-green-200.rounded-lg.text-center
      .text-green-800.font-bold.text-lg 🎉 このパズルは完成済みです！ 🎉
      .flex.justify-around.items-center.mt-2
        div
          .text-sm.text-green-600.mt-1
            = "完成日時: #{@completion_info[:completed_at].strftime('%Y/%m/%d %H:%M')}"
          .text-sm.text-green-600
            = "完成時間: #{@completion_info[:completion_time]}"
        .mt-2
          = link_to '次の問題に挑戦', puzzle_path(@puzzle.id + 1), class: 'px-2 py-2 text-xs bg-blue-500 text-white rounded hover:bg-blue-700 transition duration-300'

  / 数字選択モーダル（初期状態は非表示）
  .fixed.z-50.bg-white.border-2.border-gray-300.rounded-lg.shadow-xl.p-2.hidden data-board-target="numberModal"
    .grid.grid-cols-3.gap-1 class='w-[120px]'
      - (1..9).each do |num|
        button.w-8.h-8.bg-white.border.border-gray-300.rounded.text-sm.font-bold.hover:bg-blue-100.focus:outline-none.focus:ring-2.focus:ring-blue-400.transition-all.duration-150.hover:scale-110[
          type='button'
          data-action='click->board#selectNumber'
          data-value=num
        ]
          = num
      button.col-span-3.w-full.h-6.bg-red-50.border.border-red-300.rounded.text-xs.font-bold.hover:bg-red-100.focus:outline-none.focus:ring-2.focus:ring-red-400.transition-all.duration-150 [
        type='button'
        data-action='click->board#selectNumber'
        data-value='0'
      ]
        | 消す

  turbo-frame#number_place_board
    = form_with(url: puzzle_path(@puzzle), method: :patch, data: { board_target: 'form' }) do |f|
      = f.hidden_field :row, data: { board_target: 'rowInput' }
      = f.hidden_field :col, data: { board_target: 'colInput' }
      = f.hidden_field :value, data: { board_target: 'valueInput' }
      = f.hidden_field :time, data: { board_target: 'timeInput' }

      .flex.flex-col.items-center
        / 9x9 Grid Board
        .grid.grid-cols-9.bg-gray-300.border-4.border-gray-700.rounded-lg.shadow-lg class="w-[450px] h-[450px]"
          - @user_inputs_array.each_with_index do |row, r_idx|
            - row.each_with_index do |value, c_idx|
              - is_initial_value = @puzzle.cells[r_idx][c_idx].to_i.zero?
              - has_user_input = !value.to_i.zero?
              div [
                id="cell_#{r_idx}_#{c_idx}"
                class=cell_classes(r_idx, c_idx, is_initial_value, has_user_input)
                data-row=r_idx
                data-col=c_idx
                data-action='click->board#selectCell'
                data-initial=is_initial_value.to_s
              ]
                = value.to_i.zero? ? '' : value

        .grid.grid-cols-5.gap-2.mt-6
          - (1..9).each do |num|
            button.w-16.h-16.bg-white.border-2.border-gray-400.rounded-lg.text-2xl.font-bold.hover:bg-yellow-200.focus:outline-none.focus:ring-2.focus:ring-blue-500 [
              type='button'
              data-action='click->board#enterNumber'
              data-value=num
            ]
              = num
          button.w-16.h-16.bg-white.border-2.border-gray-400.rounded-lg.text-xl.font-bold.hover:bg-red-200.focus:outline-none.focus:ring-2.focus:ring-red-500 [
            type='button'
            data-action='click->board#enterNumber'
            data-value='0'
          ]
            | 消す

  .mt-6.flex.justify-around.space-x-4
    = link_to '難易度選択に戻る', root_path, class: 'px-6 py-2 bg-gray-500 text-white font-semibold rounded-lg shadow-md hover:bg-gray-700 transition duration-300'
    / TODO: 次の問題がないときはリンクをなくす
    = button_to '次の問題', puzzle_path(@puzzle.id + 1), method: :get, class: 'px-6 py-2 bg-blue-500 text-white font-semibold rounded-lg shadow-md cursor-pointer hover:bg-blue-700 transition duration-300'
